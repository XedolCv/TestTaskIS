1. Я считаю что для данной системы аналитики реального времени должна хорошо подойдти микросервисная архитеркутра. 
В зависимости от нагрузки требуемое наличие микросервисов, таких как Docker на .Net Core 6 с использованием Entity Framework Core и 
банансировщик нагрузки NGINX, который при правильной настройке обеспечит грамотное распределение запросов по микросервисам и
отказоустойчивость данной системы. Такая архитерктура позволит во-первых возможность легкого расширения в случае увеличения 
поступаемых запросов на сервис путем простого добавления дополнительных контейнеров, во-вторых откзоустойчивость в случае если один 
из контейнеров даст сбой по техническим причинам будь то отсутсвие света или интернета, особенно если сервисы будут расположены
на рахных серверах на случай локальной неисправности, в-третьих при использовании EF Core код становится более читаемым и
его проще добарабывать, так же при учете того что сервисы будут направлены на разные задачи, например часть для записи и редактирования и
вторая часть для чтения , то для разработки и поддержания конкретного сервиса нет необходимости в большой команде, ну и такая архитектура
позволит более гладко и незметно проводить обновления , так как есть вохможность постепенного обновления контейнеров без ущерба 
производительности, балансировщик нагрузки на время обновления перераспределит нагрузку на свободные сервисы  и во время обновления 
работа системы не останавливается.


2. Web-API на .Net Core 6 с использованием EF Core, ветка main 
Для убоного просмотра и тестирования при запуске запускается Swagger UI что бы проверить доступные контроллеры и запросы и тут же 
их протестировать. 
Простая авторизация пользователя через Guid в Базе с разграничением ролей , у каждого пользователя есть список доступных ему 
действий (create,red,update,delete), на уровне Middleware при запросах на контроллеры Device и Event идёт проверка Headers на
наличие пользователя с таким Guid в БД и проверка допустимых ему методов , так например пользователь с правами только на чтение
имеет доступ только к GET запросам , при попытке выполнить POST запрос возвращается 401 ошибка.
БД PostgreSQL на удаленном сервере на базе Ubuntu на облачной платформе https://timeweb.cloud/.
Для запуска особо ничего не требуется, просто запустить проект и уже непосредственно при запуске откроется Swagger UI.

на API реализоны методы по созданию и получение User(Пользователей),Device(Устройств),Event(событий).
Для User и Device создание и полный список имеющихся в БД записей.
Для Event создание , полный список и список для конкретного Device.

Для доступа к контроллерам Event и Device необходимо указать UserId существующего в БД пользователя с учетом имебщихся у него 
привелегий, так например пользователь root имеет все права и достпу ко всем запросам, а пользователь readonly только на чтение 
и только к GET запросам.

На данный момент в базе 2 пользователя, 2 устройства и 5 событий 2 для первого устройства и 3 для второго устройства.
